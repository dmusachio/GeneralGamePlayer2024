<!DOCTYPE html>
<html>
<head>
  <title>Greedy</title>
  <script type='text/javascript' src='/epilog/javascript/epilog.js'></script>
  <script type='text/javascript' src='../javascript/localstorage.js'></script>
  <script type='text/javascript' src='../interpreter/general.js'></script>
  <script type='text/javascript'>
    //==============================================================================
    // greedy.js
    //==============================================================================

    var role = 'robot';
    var roles = [];
    var state = [];
    var library = [];
    var rules = [];
    var startclock = 10;
    var playclock = 10;

    var tree = {};

    //==============================================================================

    function ping() {
      return 'ready';
    }

    function makenode(state, mover, reward) {
        return {state: state, actions: [], children: [], mover: mover, utility: reward, visits: 0};
    }

    function subtree(move, node) {
        if (node.children.length === 0) {
            expand(node);
        };
        for (var i = 0; i < node.actions.length; i++) {
            if (equalp(move, node.actions[i])) {
                return node.children[i];
            };
        };
        return node;
    }

    function process(node) {
        if (findterminalp(node.state, library)) {
            return true;
        };
        if (node.children.length === 0) {
            expand(node);
        } else {
            process(select(node));
        };
        update(node);
        return true;
    }

    function value(utility, visits, total) {
        var score = (utility + Math.round((1 - visits/total)*100));
        return score;
    }

    function select(node) {
        var total = node.visits;
        var child = node.children[0];
        var score = child.utility;
        for (var i=1; i < node.children.length; i++) {
            var newchild = node.children[i];
            var newscore = newchild.utility;
            if (newscore > score) {
                child = newchild;
                score = newscore;
            };
        };
        return child;
    }

    function expand(node) {
        node.actions = findlegals(node.state, library);
        for (var i = 0; i < node.actions.length; i++) {
            var newstate = simulate(node.actions[i], node.state, library);
            var newmover = findcontrol(newstate, library);
            var newscore = numberize(findreward(role, newstate, library));
            node.children[i] = makenode(newstate, newmover, newscore);
        };
        return true;
    }

    function scoremax(node) {
        var score = node.children[0].utility;
        for (var i = 1; i < node.children.length; i++) {
            var newscore = node.children[i].utility;
            if (newscore > score) {
                score = newscore;
            };
        };
        return newscore;
    }
    
    function scoremin(node) {
        var score = node.children[0].utility;
        for (var i = 1; i < node.children.length; i++) {
            var newscore = node.children[i].utility;
            if (newscore < score) {
                score = newscore;
            };
        };
        return newscore;
    }

    function update(node) {
        if (node.mover === role) {
            node.utility = scoremax(node);
        } else {
            node.utility = scoremin(node);
        };
        node.visits = node.visits + 1;
        return true;
    }

    function selectaction(node) {
        var action = node.actions[0];
        var score = node.children[0].utility;
        for (var i = 1; i < node.children.length; i++) {
            var newscore = node.children[i].utility;
            if (newscore > score) {
                action = node.actions[i];
                score = newscore;
            };
        };
        return action;
    }

    function start(r, rs, sc, pc) {
      role = r;
      rules = rs.slice(1);
      startclock = numberize(sc);
      playclock = numberize(pc);
      library = definemorerules([], rs.slice(1));
      roles = findroles(library);
      state = findinits(library);

      var reward = numberize(findreward(role, state, library));
      tree = makenode(state, findcontrol(state, library), reward);
      return 'ready';
    }

    function play(move) {
      if (move !== nil) {
        tree = subtree(move, tree);
        state = tree.state;
      };
      if (findcontrol(state, library) !== role) {
        return false;
      };
      var deadline = Date.now() + (playclock-2)*1000;
      while (Date.now() < deadline) {
        process(tree);
      }
      return selectaction(tree);
    }

    function stop(move) {
      return false;
    }

    function abort() {
      return false;
    }

    //==============================================================================
    // End of player code
    //==============================================================================

    var manager = 'manager';
    var player = 'team_orange';

    //==============================================================================
    // End of Customization
    //==============================================================================
  </script>
</head>
<body bgcolor='#aabbbb' onload='doinitialize()'>
<!--
  Commentary: we decided to implement and upload our greedy player because it 
  performed very well in a wide variety of single player and multiplayer 
  games. The idea of a greedy player is to represent states as nodes and to 
  expand nodes as needed as the game goes on. The way the greedy algorithm 
  works in our implementation is when calculating the value, we look at the 
  utility of the node. The highest utility score (referred to as exploitation) 
  means that this node has led to favorable outcomes for our player the most 
  out of any node. We have found that our player is performing better on large 
  state games, like Skirmish, also because we implemented a deadline feature 
  that ensures that we have a move before the deadline. 
  -->
  <center>
    <table width='720' cellspacing='0' cellpadding='40' bgcolor='#ffffff'>
      <tr>
        <td>
          <center>
            <table width='640' cellpadding='0'>
              <tr>
                <td width='180' align='center' valign='center'>
                  <img width='130' src='http://gamemaster.stanford.edu/images/ggp.jpg'/>
                </td>
                <td align='center'>
                  <span style='font-size:18pt'>&nbsp;</span>
                  <span style='font-size:32pt'>Gamemaster</span><br/>
                </td>
                <td width='180' align='center' style='color:#000066;font-size:18px'>
                  <i>General<br/>Game<br/>Playing</i>
                </td>
              </tr>
            </table>
          </center>
          <br/>
          <table width='640' cellpadding='8' cellspacing='0' bgcolor='#f4f8f8' border='1'>
            <tr height='40'>
               <td align='center'>
                  <table style='color:#000066;font-size:18px'>
                    <tr>
                      <td>
                        Protocol: localstorage<br/>
                        Metagamer: none<br/>
                        Strategy: greedy<br/>
                        Identifier: <span id='player'>team_orange</span> <img src="http://gamemaster.stanford.edu/images/pencil.gif" onclick='doplayer()'/>
                    </tr>
                  </table>
              </td>
            </tr>
          </table>
          <br/>
          <center>
            <br/>
            <textarea id='transcript' style='font-family:courier' rows='30' cols='80' readonly></textarea>
          </center>
        </td>
      </tr>
    </table>
  </center>
</body>
</html>
